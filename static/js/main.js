// Generated by CoffeeScript 1.7.1
(function() {
  var Cookies, GIGABYTE, History, addFile, api, currentPage, files, initFilePages, loadStats, makeHandler, pageCount, pickFilePage, pickPagination, selectElementText, showUploadStage, uploadFile;

  uploadFile = function(cb) {
    return cb();
  };

  api = function(resource) {
    return 'http://node2.storj.io/api/' + resource;
  };

  GIGABYTE = 1024 * 1024 * 1024;

  Cookies = {
    set: (function(k, v, days) {
      var date, expires, secs;
      if (days) {
        date = new Date();
        secs = days * 24 * 60 * 60 * 1000;
        date.setTime(date.getTime() + secs);
        expires = '; expires=' + date.toGMTString() + '; max-age=' + secs;
      } else {
        expires = '';
      }
      return document.cookie = k + '=' + v + expires + '; path=/';
    }),
    get: (function(k) {
      var cookie, cookies, index, name, v, _i, _len, _ref;
      cookies = document.cookie.split(';');
      for (_i = 0, _len = cookies.length; _i < _len; _i++) {
        cookie = cookies[_i];
        cookie = cookie.trim();
        index = cookie.indexOf('=');
        _ref = [cookie.substring(0, index), cookie.substring(index + 1)], name = _ref[0], v = _ref[1];
        if (name === k) {
          return v;
        }
      }
      return null;
    }),
    kill: (function(k) {
      return this.set(k, '', -11);
    })
  };

  History = {
    add: (function(file) {
      var stuff;
      stuff = JSON.parse(Cookies.get('history')) || [];
      stuff.push(file);
      return Cookies.set('history', JSON.stringify(stuff));
    }),
    get: (function() {
      return JSON.parse(Cookies.get('history'));
    }),
    kill: (function() {
      return Cookies.kill('history');
    })
  };

  loadStats = function() {
    $.getJSON(api('storage/size-limit'), function(file_limit) {
      file_limit.size /= GIGABYTE;
      return $('#cont-file-size-limit').html(file_limit.size.toFixed(2) + ' GB');
    });
    $.getJSON(api('bandwidth/usage'), function(usage) {
      usage.current.incoming /= GIGABYTE;
      usage.current.outgoing /= GIGABYTE;
      return $.getJSON(api('bandwidth/limits'), function(limits) {
        if (limits.incoming === 0) {
          $('#bar-ul-bandwidth').css('width', '0%');
          $('#cont-ul-bandwidth').html(usage.current.incoming.toFixed(2) + '/&infin; GB');
        } else {
          limits.incoming /= GIGABYTE;
          $('#bar-ul-bandwidth').css('width', (usage.current.incoming / limits.incoming * 100) + '%');
          $('#cont-ul-bandwidth').text(usage.current.incoming.toFixed(2) + '/' + limits.incoming.toFixed(2) + ' GB');
        }
        if (limits.outgoing === 0) {
          $('#bar-dl-bandwidth').css('width', '0%');
          return $('#cont-dl-bandwidth').html(usage.current.outgoing.toFixed(2) + '/&infin; GB');
        } else {
          limits.outgoing /= GIGABYTE;
          $('#bar-dl-bandwidth').css('width', (usage.current.outgoing / limits.outgoing * 100) + '%');
          return $('#cont-dl-bandwidth').text(usage.current.outgoing.toFixed(2) + '/' + limits.outgoing.toFixed(2) + ' GB');
        }
      });
    });
    $.getJSON(api('storage/usage'), function(usage) {
      usage = usage.usage / GIGABYTE;
      return $.getJSON(api('storage/capacity'), function(capacity) {
        capacity = capacity.capacity / GIGABYTE;
        $('#bar-storage').css('width', (usage / capacity * 100) + '%');
        return $('#cont-storage').text(usage.toFixed(2) + '/' + capacity.toFixed(2) + ' GB');
      });
    });
    $.getJSON(api('dtc/address'), function(addr) {
      return $('#cont-datacoin-addr').html('<code>' + addr.address + '</code>').find('code').click(function() {
        return selectElementText($(this)[0]);
      });
    });
    $.getJSON(api('dtc/balance'), function(balance) {
      return $('#cont-datacoin-bal').text(balance.balance + ' DTC');
    });
    return $.getJSON(api('sync/status'), function(data) {
      var bcSize, cloudSize, size, x, _i, _j, _len, _len1, _ref, _ref1;
      cloudSize = 0;
      _ref = [
        (function() {
          var _j, _len, _ref, _results;
          _ref = data.cloud_queue;
          _results = [];
          for (_j = 0, _len = _ref.length; _j < _len; _j++) {
            x = _ref[_j];
            _results.push(x.filesize);
          }
          return _results;
        })()
      ];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        size = _ref[_i];
        cloudSize += size / GIGABYTE;
      }
      bcSize = 0;
      _ref1 = (function() {
        var _k, _len1, _ref1, _results;
        _ref1 = data.blockchain_queue;
        _results = [];
        for (_k = 0, _len1 = _ref1.length; _k < _len1; _k++) {
          x = _ref1[_k];
          _results.push(x.filesize);
        }
        return _results;
      })();
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        size = _ref1[_j];
        bcSize += size / GIGABYTE;
      }
      $('#cont-sync-cloud').text(data.cloud_queue.length + ' (' + cloudSize.toFixed(2) + ' GB)');
      return $('#cont-sync-blockchain').text(data.blockchain_queue.length + ' (' + bcSize.toFixed(2) + ' GB)');
    });
  };

  loadStats();

  showUploadStage = function(stage) {
    $('#cont-upload').hide();
    $('#cont-uploaded').hide();
    $('#cont-uploading').hide();
    return $('#cont-' + stage).show();
  };

  selectElementText = function(el, win) {
    var doc, range, sel;
    win = win || window;
    doc = win.document;
    if (win.getSelection && doc.createRange) {
      sel = win.getSelection();
      range = doc.createRange();
      range.selectNodeContents(el);
      sel.removeAllRanges();
      return sel.addRange(range);
    } else if (doc.body.createTextRange) {
      range = doc.body.createTextRange();
      range.moveToElementText(el);
      return range.select();
    }
  };

  addFile = function(file) {
    var $file;
    $file = $('<div/>').addClass('file-row cf').append($('<div/>').addClass('left').append('<div class="name">' + file.fname + '</div>').append('<div class="hash"><code>' + file.fhash + '</code></div>')).append($('<div/>').addClass('right').append('<button class="btn btn-dl"><i class="fa fa-download"></i>Download</button>')).append($('<div/>').addClass('right').append('<button class="btn btn-copy-url"><i class="fa fa-clipboard"></i>Copy URL</button>')).prependTo($('#cont-file-list'));
    $file.find('button.btn-dl').click(function() {
      return window.location.href = api('download/' + file.fhash);
    });
    $file.find('button.btn-copy-url').zclip({
      path: '/static/js/ZeroClipboard.swf',
      copy: function() {
        return api('download/' + file.fhash);
      }
    });
    return $file.find('code').zclip({
      path: '/static/js/ZeroClipboard.swf',
      copy: function() {
        return $(this).html();
      }
    });
  };

  makeHandler = function(fname) {
    return function(fhash) {
      var ext, name, page, splitted;
      fhash = fhash.filehash;
      History.add({
        fname: fname,
        fhash: fhash
      });
      name = fname;
      ext = null;
      if (fname.indexOf('.') !== -1) {
        splitted = name.split('.');
        name = splitted.slice(0, -1);
        ext = splitted[splitted.length - 1];
      }
      if (ext !== null) {
        name += '<span class="text-muted">.' + ext + '</span>';
      }
      showUploadStage('uploaded');
      $('#span-dl-link').val(api('download/' + fhash));
      page = currentPage();
      initFilePages();
      pickFilePage(page);
      return loadStats();
    };
  };

  $('#in-upload').change(function() {
    return uploadFile($(this).val().split('\\').pop(), new FormData($('#form-file-upload')[0]));
  });

  uploadFile = function(fname, formData) {
    var progressHandler;
    showUploadStage('uploading');
    $('#span-up-prog').css('width', '0%').text('0%');
    progressHandler = function(e) {
      var perc;
      perc = e.loaded / e.total * 100;
      return $('#span-up-prog').css('width', perc + '%').text(Math.round(perc) + '%');
    };
    return $.ajax({
      url: api('upload'),
      type: 'POST',
      xhr: (function() {
        var xhr;
        xhr = $.ajaxSettings.xhr();
        if (xhr.upload) {
          xhr.upload.addEventListener('progress', progressHandler, false);
        }
        return xhr;
      }),
      data: formData,
      cache: false,
      contentType: false,
      processData: false,
      success: makeHandler(fname)
    });
  };

  $('document').on('dragenter', (function(e) {
    e.preventDefault();
    return e.stopPropagation();
  }));

  $('document').on('dragover', (function(e) {
    e.preventDefault();
    return e.stopPropagation();
  }));

  $('document').on('drop', (function(e) {
    var file, formData;
    file = e.originalEvent.dataTransfer.files[0];
    formData = new FormData();
    formData.append('file', file);
    uploadFile(file.name, formData);
    e.preventDefault();
    return e.stopPropagation();
  }));

  $('#span-dl-link').focus(function() {
    return $(this).select();
  });

  $('#span-dl-link').click(function() {
    return $(this).select();
  });

  $('#btn-upload-another').click(function() {
    return showUploadStage('upload');
  });

  files = History.get();

  currentPage = function() {
    return parseInt($('#cont-pagination').attr('data-current'));
  };

  pageCount = function() {
    return parseInt((History.get().length + 9) / 10);
  };

  pickPagination = function(page) {
    $('#cont-pagination').attr('data-current', page);
    return $('#cont-pagination button').each(function() {
      var found;
      found = false;
      if (!isNaN($(this).attr('data-id'))) {
        if (parseInt($(this).attr('data-id')) === page) {
          found = true;
        }
      }
      return $(this).prop('disabled', found);
    });
  };

  pickFilePage = function(page) {
    var file, _i, _len, _ref;
    if (page === "next") {
      page = Math.min(currentPage() + 1, pageCount() - 1);
    }
    if (page === "prev") {
      page = Math.max(0, currentPage() - 1);
    }
    $('#cont-file-list').empty();
    _ref = History.get().slice(page * 10, (page + 1) * 10);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      file = _ref[_i];
      addFile(file);
    }
    return pickPagination(page);
  };

  initFilePages = function() {
    var $cont, i, _i, _ref;
    $cont = $('#cont-pagination');
    $cont.empty();
    $cont.append('<button data-id="prev" type="button" class="btn btn-default"><i class="fa fa-arrow-circle-left"></i></button>');
    for (i = _i = 0, _ref = pageCount(); 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      $cont.append('<button data-id="' + i + '" type="button" class="btn btn-default">' + (i + 1) + '</button>');
    }
    $cont.append('<button data-id="next" type="button" class="btn btn-default"><i class="fa fa-arrow-circle-right"></i></button>');
    $cont.find('button').click(function() {
      return pickFilePage($(this).attr('data-id'));
    });
    return pickFilePage(0);
  };

  initFilePages();

}).call(this);
